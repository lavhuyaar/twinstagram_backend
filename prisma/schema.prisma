generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  username       String       @unique @db.VarChar(30)
  password       String
  firstName      String       @db.VarChar(30)
  lastName       String       @db.VarChar(30)
  profilePicture String?
  posts          Post[]       @relation("My Posts")
  comments       Comment[]
  profileType    PROFILE_TYPE @default(PUBLIC)
  likedPosts     Post[]       @relation("Liked Posts")
  following      Follow[]     @relation("Following")
  followers      Follow[]     @relation("Follower")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  user      User      @relation("My Posts", fields: [userId], references: [id])
  userId    String
  content   String    @db.VarChar(2000)
  image     String?
  imageId   String?
  comments  Comment[]
  likes     User[]    @relation("Liked Posts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  post            Post     @relation(fields: [postId], references: [id])
  postId          String
  content         String   @db.VarChar(200)
  repliedToUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Follow {
  id              String       @id @default(uuid())
  isFollowing     IS_FOLLOWING @default(FALSE)
  requestBy       User         @relation("Following", fields: [requestByUserId], references: [id])
  requestByUserId String
  requestTo       User         @relation("Follower", fields: [requestToUserId], references: [id])
  requestToUserId String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum PROFILE_TYPE {
  PUBLIC
  PRIVATE
}

enum IS_FOLLOWING {
  TRUE
  FALSE
  PENDING
}
